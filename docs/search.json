[{"path":"/articles/persuasive_explanations.html","id":"persuasive-explanations","dir":"Articles","previous_headings":"","what":"Persuasive Explanations","title":"Get a persuasive explanation of the output of a classifier","text":"Persuasive explanations classifier output given input \\(X\\) tuple \\(<S,C>\\), \\(S\\) set sufficient explanations \\(C\\) set counterfactual explanations. Sufficient explanations subsets explanatory variables , values original input \\(X\\), output classifier remain regardless value rest variables. Counterfactual explanations opposite: value assignations subset explanatory variables , different values original assignation \\(X\\), variables remain value, output changes.","code":""},{"path":"/articles/persuasive_explanations.html","id":"bfs_sfx","dir":"Articles","previous_headings":"Persuasive Explanations","what":"BFS_SFX","title":"Get a persuasive explanation of the output of a classifier","text":"BFS_SFX (Koopman Renooij 2021) algorithm find sufficient explanations output Bayesian Network, may also used almost classifier. use example, one sufficient explanation obtained output “Fallot”: XrayReport = “Oligaemic”, enough get output: “Fallot”. Note given use approximate inference algorithm available variables, explanation may change due inherent randomness algorithm.","code":"set.seed(40) download.file(\"https://www.bnlearn.com/bnrepository/child/child.rda\",               \"child.rda\", \"auto\", quiet = TRUE) load(\"child.rda\")  # Load CHILD Bayesian Network evidence = data.frame(   LVHReport=factor(x = \"yes\", levels = dimnames(bn$LVHreport$prob)[[1]]),   LowerBodyO2=factor(x = \"5-12\", levels = dimnames(bn$LowerBodyO2$prob)[[1]]),   CO2Report=factor(x = \"<7.5\", levels = dimnames(bn$CO2Report$prob)[[1]]),   XrayReport=factor(x = \"Oligaemic\", levels = dimnames(bn$XrayReport$prob)[[1]]) ) target <- predict(object = bn, node = bn$Disease$node, data = evidence,                  method = \"bayes-lw\") print(\"Classification input (see dataframe):\") #> [1] \"Classification input (see dataframe):\" print(evidence) #>   LVHReport LowerBodyO2 CO2Report XrayReport #> 1       yes        5-12      <7.5  Oligaemic print(\"Classification output:\") #> [1] \"Classification output:\" print(target) #> [1] Fallot #> Levels: PFC TGA Fallot PAIVS TAPVD Lung expected <- factor(\"TGA\", levels = levels(target)) print(\"Expected output was:\") #> [1] \"Expected output was:\" print(expected) #> [1] TGA #> Levels: PFC TGA Fallot PAIVS TAPVD Lung predict_f <- function(df) {   predict(object = bn, node = bn$Disease$node, data = df, method = \"bayes-lw\", n = 500000)} print(\"Sufficient explanation for the output:\") #> [1] \"Sufficient explanation for the output:\" str(bfs_sfx(predict_f, evidence, target, expected)) #> List of 1 #>  $ :List of 1 #>   ..$ XrayReport: Factor w/ 5 levels \"Normal\",\"Oligaemic\",..: 2"},{"path":"/articles/persuasive_explanations.html","id":"bfs_cfx","dir":"Articles","previous_headings":"Persuasive Explanations","what":"BFS_CFX","title":"Get a persuasive explanation of the output of a classifier","text":"BFS_CFX (Koopman Renooij 2021) algorithm find counterfactual explanations output Bayesian Network, may also used almost classifier. applied similar fashion BFS_CFX (shown ). output next example gives possible counterfactual explanations given output “TGA” rest variables maintain values.","code":"print(\"Classification input (see dataframe):\") #> [1] \"Classification input (see dataframe):\" print(evidence) #>   LVHReport LowerBodyO2 CO2Report XrayReport #> 1       yes        5-12      <7.5  Oligaemic print(\"Classification output:\") #> [1] \"Classification output:\" print(target) #> [1] Fallot #> Levels: PFC TGA Fallot PAIVS TAPVD Lung print(\"Expected output was:\") #> [1] \"Expected output was:\" print(expected) #> [1] TGA #> Levels: PFC TGA Fallot PAIVS TAPVD Lung print(\"Counterfactual explanations for the output:\") #> [1] \"Counterfactual explanations for the output:\" str(bfs_cfx(predict_f, evidence, target, expected)) #> List of 4 #>  $ :List of 1 #>   ..$ XrayReport: Factor w/ 5 levels \"Normal\",\"Oligaemic\",..: 1 #>  $ :List of 1 #>   ..$ XrayReport: Factor w/ 5 levels \"Normal\",\"Oligaemic\",..: 3 #>  $ :List of 1 #>   ..$ XrayReport: Factor w/ 5 levels \"Normal\",\"Oligaemic\",..: 4 #>  $ :List of 2 #>   ..$ LowerBodyO2: Factor w/ 3 levels \"<5\",\"5-12\",\"12+\": 1 #>   ..$ XrayReport : Factor w/ 5 levels \"Normal\",\"Oligaemic\",..: 5"},{"path":"/articles/persuasive_explanations.html","id":"bfs_sfx_cfx","dir":"Articles","previous_headings":"Persuasive Explanations","what":"BFS_SFX_CFX","title":"Get a persuasive explanation of the output of a classifier","text":"BFS_SFX_CFX (Koopman Renooij 2021) combination algorithms computes time counterfactual sufficient explanations outcome. different pairs can formed sufficient explanations counterfactual explanations called persuasive explanations. algorithm used similarly :","code":"print(\"Classification input (see dataframe):\") #> [1] \"Classification input (see dataframe):\" print(evidence) #>   LVHReport LowerBodyO2 CO2Report XrayReport #> 1       yes        5-12      <7.5  Oligaemic print(\"Classification output:\") #> [1] \"Classification output:\" print(target) #> [1] Fallot #> Levels: PFC TGA Fallot PAIVS TAPVD Lung print(\"Expected output was:\") #> [1] \"Expected output was:\" print(expected) #> [1] TGA #> Levels: PFC TGA Fallot PAIVS TAPVD Lung print(\"Persuasive explanations for the output:\") #> [1] \"Persuasive explanations for the output:\" str(bfs_sfx_cfx(predict_f, evidence, target, expected)) #> List of 2 #>  $ sfxs:List of 1 #>   ..$ :List of 1 #>   .. ..$ XrayReport: Factor w/ 5 levels \"Normal\",\"Oligaemic\",..: 2 #>  $ cfxs:List of 4 #>   ..$ :List of 1 #>   .. ..$ XrayReport: Factor w/ 5 levels \"Normal\",\"Oligaemic\",..: 1 #>   ..$ :List of 1 #>   .. ..$ XrayReport: Factor w/ 5 levels \"Normal\",\"Oligaemic\",..: 3 #>   ..$ :List of 1 #>   .. ..$ XrayReport: Factor w/ 5 levels \"Normal\",\"Oligaemic\",..: 4 #>   ..$ :List of 2 #>   .. ..$ LowerBodyO2: Factor w/ 3 levels \"<5\",\"5-12\",\"12+\": 1 #>   .. ..$ XrayReport : Factor w/ 5 levels \"Normal\",\"Oligaemic\",..: 5"},{"path":"/articles/persuasive_explanations.html","id":"using-a-helper-function-for-bnlearn","dir":"Articles","previous_headings":"Persuasive Explanations > BFS_SFX_CFX","what":"Using a helper function for bnlearn","title":"Get a persuasive explanation of the output of a classifier","text":"wrapper function provided use algorithm Bayesian Network implemented bnlearn (Scutari, Silander, Ness 2021). main advantage allows set threshold classification MLE. Currently setting threshold label allowed, planned make change include feature soon, limited policy.","code":"# Predict most likely label if posterior prob > 0.20 else predict TGA predict_f <- bnlearn_predict_wrapper(bn, bn$Disease$node, \"bayes-lw\",                                      threshold=0.20, default=\"TGA\") print(bfs_sfx(predict_f, evidence, target, expected)) #> [[1]] #> [[1]]$CO2Report #> [1] <7.5 #> Levels: <7.5 >=7.5 #>  #> [[1]]$XrayReport #> [1] Oligaemic #> Levels: Normal Oligaemic Plethoric Grd_Glass Asy/Patchy #>  #>  #> [[2]] #> [[2]]$LVHReport #> [1] yes #> Levels: yes no #>  #> [[2]]$XrayReport #> [1] Oligaemic #> Levels: Normal Oligaemic Plethoric Grd_Glass Asy/Patchy"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"johacks. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"johacks (2022). bncounterfactuals: COUNTERFACTUAL SUFFICIENT EXPLANATIONS BAYESIAN NETWORKS. R package version 0.1.1.","code":"@Manual{,   title = {bncounterfactuals: COUNTERFACTUAL AND SUFFICIENT EXPLANATIONS FOR BAYESIAN NETWORKS},   author = {{johacks}},   year = {2022},   note = {R package version 0.1.1}, }"},{"path":"/index.html","id":"bncounterfactuals","dir":"","previous_headings":"","what":"COUNTERFACTUAL AND SUFFICIENT EXPLANATIONS FOR BAYESIAN NETWORKS","title":"COUNTERFACTUAL AND SUFFICIENT EXPLANATIONS FOR BAYESIAN NETWORKS","text":"package implements algorithms get sufficient /counterfactual explanations machine learning algorithms, oriented use Bayesian networks.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 johacks Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/reference/bfs_cfx.html","id":null,"dir":"Reference","previous_headings":"","what":"Get counterfactual explanations for a prediction — bfs_cfx","title":"Get counterfactual explanations for a prediction — bfs_cfx","text":"Get counterfactual explanations prediction","code":""},{"path":"/reference/bfs_cfx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get counterfactual explanations for a prediction — bfs_cfx","text":"","code":"bfs_cfx(predict_f, evidence, outcome, expected)"},{"path":"/reference/bfs_cfx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get counterfactual explanations for a prediction — bfs_cfx","text":"predict_f function takes dataframe evidence outputs list prediction row. evidence dataframe one row columns type factor. outcome resulting prediction evidence. expected expected prediction evidence","code":""},{"path":"/reference/bfs_cfx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get counterfactual explanations for a prediction — bfs_cfx","text":"Counterfactual explanations list named lists.","code":""},{"path":"/reference/bfs_cfx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get counterfactual explanations for a prediction — bfs_cfx","text":"","code":"set.seed(40) bn <- NULL if (!requireNamespace(\"bnlearn\", quietly = TRUE)) {   stop(\"bnlearn package needed to execute this functionality\") } download.file(\"https://www.bnlearn.com/bnrepository/child/child.rda\",   \"child.rda\", \"auto\",   quiet = TRUE ) load(\"child.rda\") # Load the popular CHILD Bayesian Network file.remove(\"child.rda\") #> [1] TRUE evidence <- data.frame(   LVHReport = factor(x = \"yes\", levels = dimnames(bn$LVHreport$prob)[[1]]),   LowerBodyO2 = factor(x = \"5-12\", levels = dimnames(bn$LowerBodyO2$prob)[[1]]),   CO2Report = factor(x = \"<7.5\", levels = dimnames(bn$CO2Report$prob)[[1]]),   XrayReport = factor(x = \"Oligaemic\", levels = dimnames(bn$XrayReport$prob)[[1]]) ) outcome <- predict(   object = bn, node = bn$Disease$node, data = evidence, method = \"bayes-lw\" ) print(paste(\"Outcome: \", outcome)) #> [1] \"Outcome:  Fallot\" expected <- factor(\"TGA\", levels = levels(outcome)) predict_f <- bnlearn_predict_wrapper(bn, bn$Disease$node, \"bayes-lw\", n = 5000) r <- bfs_cfx(predict_f, evidence, outcome, expected) print(data.table::rbindlist(r, fill = T)) #>    XrayReport LowerBodyO2 #> 1:     Normal        <NA> #> 2:  Plethoric        <NA> #> 3:  Grd_Glass        <NA> #> 4: Asy/Patchy          <5"},{"path":"/reference/bfs_sfx.html","id":null,"dir":"Reference","previous_headings":"","what":"Get sufficient explanations for a prediction — bfs_sfx","title":"Get sufficient explanations for a prediction — bfs_sfx","text":"Get sufficient explanations prediction","code":""},{"path":"/reference/bfs_sfx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get sufficient explanations for a prediction — bfs_sfx","text":"","code":"bfs_sfx(predict_f, evidence, outcome, expected)"},{"path":"/reference/bfs_sfx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get sufficient explanations for a prediction — bfs_sfx","text":"predict_f function takes dataframe evidence outputs list prediction row. evidence dataframe one row columns type factor. outcome resulting prediction evidence. expected expected prediction evidence","code":""},{"path":"/reference/bfs_sfx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get sufficient explanations for a prediction — bfs_sfx","text":"Sufficient explanations list named lists.","code":""},{"path":"/reference/bfs_sfx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get sufficient explanations for a prediction — bfs_sfx","text":"","code":"set.seed(40) download.file(\"https://www.bnlearn.com/bnrepository/child/child.rda\",   \"child.rda\", \"auto\",   quiet = TRUE ) load(\"child.rda\") # Load CHILD Bayesian Network evidence <- data.frame(   LVHReport = factor(x = \"yes\", levels = dimnames(bn$LVHreport$prob)[[1]]),   LowerBodyO2 = factor(x = \"5-12\", levels = dimnames(bn$LowerBodyO2$prob)[[1]]),   CO2Report = factor(x = \"<7.5\", levels = dimnames(bn$CO2Report$prob)[[1]]),   XrayReport = factor(x = \"Oligaemic\", levels = dimnames(bn$XrayReport$prob)[[1]]) ) outcome <- predict(   object = bn, node = bn$Disease$node, data = evidence,   method = \"bayes-lw\" ) print(paste(\"Outcome: \", outcome)) #> [1] \"Outcome:  Fallot\" expected <- factor(\"TGA\", levels = levels(outcome)) predict_f <- function(df) {   predict(object = bn, node = bn$Disease$node, data = df, method = \"bayes-lw\") } print(bfs_sfx(predict_f, evidence, outcome, expected)) #> [[1]] #> [[1]]$LVHReport #> [1] yes #> Levels: yes no #>  #> [[1]]$XrayReport #> [1] Oligaemic #> Levels: Normal Oligaemic Plethoric Grd_Glass Asy/Patchy #>  #>"},{"path":"/reference/bfs_sfx_cfx.html","id":null,"dir":"Reference","previous_headings":"","what":"Get sufficient and counterfactual explanations for a prediction — bfs_sfx_cfx","title":"Get sufficient and counterfactual explanations for a prediction — bfs_sfx_cfx","text":"Get sufficient counterfactual explanations prediction","code":""},{"path":"/reference/bfs_sfx_cfx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get sufficient and counterfactual explanations for a prediction — bfs_sfx_cfx","text":"","code":"bfs_sfx_cfx(predict_f, evidence, outcome, expected)"},{"path":"/reference/bfs_sfx_cfx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get sufficient and counterfactual explanations for a prediction — bfs_sfx_cfx","text":"predict_f function takes dataframe evidence outputs list prediction row. evidence dataframe one row columns type factor. outcome resulting prediction evidence. expected expected prediction evidence (counterfactuals).","code":""},{"path":"/reference/bfs_sfx_cfx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get sufficient and counterfactual explanations for a prediction — bfs_sfx_cfx","text":"Sufficient explanations list named lists.","code":""},{"path":"/reference/bfs_sfx_cfx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get sufficient and counterfactual explanations for a prediction — bfs_sfx_cfx","text":"","code":"set.seed(40) bn <- NULL if (!requireNamespace(\"bnlearn\", quietly = TRUE)) {   stop(\"bnlearn package needed to execute this functionality\") } download.file(\"https://www.bnlearn.com/bnrepository/child/child.rda\",               \"child.rda\", \"auto\",               quiet = TRUE ) load(\"child.rda\") # Load the popular CHILD Bayesian Network file.remove(\"child.rda\") #> [1] TRUE evidence <- data.frame(   LVHReport = factor(x = \"yes\", levels = dimnames(bn$LVHreport$prob)[[1]]),   LowerBodyO2 = factor(x = \"5-12\", levels = dimnames(bn$LowerBodyO2$prob)[[1]]),   CO2Report = factor(x = \"<7.5\", levels = dimnames(bn$CO2Report$prob)[[1]]),   XrayReport = factor(x = \"Oligaemic\", levels = dimnames(bn$XrayReport$prob)[[1]]) ) outcome <- predict(   object = bn, node = bn$Disease$node, data = evidence, method = \"bayes-lw\" ) print(paste(\"Outcome: \", outcome)) #> [1] \"Outcome:  Fallot\" expected <- factor(\"TGA\", levels = levels(outcome)) predict_f <- bnlearn_predict_wrapper(bn, bn$Disease$node, \"bayes-lw\", n = 500000) r <- bfs_sfx_cfx(predict_f, evidence, outcome, expected) print(\"Sufficient explanations:\") #> [1] \"Sufficient explanations:\" print(data.table::rbindlist(r[[\"sfxs\"]], fill = T)) #>    XrayReport #> 1:  Oligaemic print(\"Counterfactual explanations\") #> [1] \"Counterfactual explanations\" print(data.table::rbindlist(r[[\"cfxs\"]], fill = T)) #>    XrayReport LowerBodyO2 #> 1:     Normal        <NA> #> 2:  Plethoric        <NA> #> 3:  Grd_Glass        <NA> #> 4: Asy/Patchy          <5"},{"path":"/reference/bnlearn_predict_wrapper.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a predict function for use of a bnlearn Bayesian network in the\r\nsearch algorithms. — bnlearn_predict_wrapper","title":"Create a predict function for use of a bnlearn Bayesian network in the\r\nsearch algorithms. — bnlearn_predict_wrapper","text":"Create predict function use bnlearn Bayesian network search algorithms.","code":""},{"path":"/reference/bnlearn_predict_wrapper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a predict function for use of a bnlearn Bayesian network in the\r\nsearch algorithms. — bnlearn_predict_wrapper","text":"","code":"bnlearn_predict_wrapper(   bn,   node,   method,   threshold = NULL,   default = NULL,   n = 500 )"},{"path":"/reference/bnlearn_predict_wrapper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a predict function for use of a bnlearn Bayesian network in the\r\nsearch algorithms. — bnlearn_predict_wrapper","text":"bn Fitted Bayesian network node Name target node predicted method options parameter 'method' predict function bnlearn threshold Minimum value posterior probability MLE output algorithm. parameter 'default' null, MLE output even surpass threshold. default Default predicted target value threshold exceeded MLE n options parameter 'n' predict function bnlearn","code":""},{"path":"/reference/bnlearn_predict_wrapper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a predict function for use of a bnlearn Bayesian network in the\r\nsearch algorithms. — bnlearn_predict_wrapper","text":"Function used algorithms bfs_sfx","code":""},{"path":"/reference/bnlearn_predict_wrapper.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a predict function for use of a bnlearn Bayesian network in the\r\nsearch algorithms. — bnlearn_predict_wrapper","text":"","code":"library(bnlearn) set.seed(40) download.file(\"https://www.bnlearn.com/bnrepository/child/child.rda\",   \"child.rda\", \"auto\",   quiet = TRUE ) load(\"child.rda\") # Load CHILD Bayesian Network evidence <- data.frame(   LVHReport = factor(x = \"yes\", levels = dimnames(bn$LVHreport$prob)[[1]]),   LowerBodyO2 = factor(x = \"5-12\", levels = dimnames(bn$LowerBodyO2$prob)[[1]]),   CO2Report = factor(x = \"<7.5\", levels = dimnames(bn$CO2Report$prob)[[1]]),   XrayReport = factor(x = \"Oligaemic\", levels = dimnames(bn$XrayReport$prob)[[1]]) ) outcome <- predict(   object = bn, node = bn$Disease$node, data = evidence,   method = \"bayes-lw\" ) expected <- factor(\"PAIVS\", levels = levels(outcome)) predict_f <- bnlearn_predict_wrapper(bn, bn$Disease$node, \"bayes-lw\",   threshold = 0.20, default = \"TGA\" ) print(bfs_sfx(predict_f, evidence, outcome, expected)) #> [[1]] #> [[1]]$LVHReport #> [1] yes #> Levels: yes no #>  #> [[1]]$XrayReport #> [1] Oligaemic #> Levels: Normal Oligaemic Plethoric Grd_Glass Asy/Patchy #>  #>"}]
